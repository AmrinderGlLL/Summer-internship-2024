{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceType":"competition","sourceId":13451,"datasetId":654585,"databundleVersionId":1188070}],"dockerImageVersionId":29995,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"                                             #INCEPT\nimport os\nimport json\n\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport pydicom\n\nfrom keras import layers\nfrom keras.applications import DenseNet121, ResNet50V2, InceptionV3\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import Callback, ModelCheckpoint, ReduceLROnPlateau, EarlyStopping\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.initializers import Constant\nfrom keras.utils import Sequence\nfrom keras.models import Sequential\nfrom keras.optimizers import Adam\nfrom keras.models import Model, load_model\nfrom keras.layers import GlobalAveragePooling2D, Dense, Activation, concatenate, Dropout\nfrom keras.initializers import glorot_normal, he_normal\nfrom keras.regularizers import l2\n\nimport keras.metrics as M\nimport tensorflow_addons as tfa\nimport pickle\n\nfrom keras import backend as K\n\nimport tensorflow as tf\nfrom tensorflow.python.ops import array_ops\n\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\n!pip install cupy-cuda101\nimport cupy as cp\n\nimport warnings\nwarnings.filterwarnings(action='once')","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-22T14:48:33.609495Z","iopub.execute_input":"2024-05-22T14:48:33.609837Z","iopub.status.idle":"2024-05-22T14:48:48.971007Z","shell.execute_reply.started":"2024-05-22T14:48:33.609805Z","shell.execute_reply":"2024-05-22T14:48:48.970206Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/tensorflow_addons/utils/ensure_tf_install.py:68: UserWarning: Tensorflow Addons supports using Python ops for all Tensorflow versions above or equal to 2.2.0 and strictly below 2.3.0 (nightly versions are not supported). \n The versions of TensorFlow you are currently using is 2.3.0 and is not supported. \nSome things might work, some things might not.\nIf you were to encounter a bug, do not file an issue.\nIf you want to make sure you're using a tested and supported configuration, either change the TensorFlow version or the TensorFlow Addons's version. \nYou can find the compatibility matrix in TensorFlow Addon's readme:\nhttps://github.com/tensorflow/addons\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"Requirement already satisfied: cupy-cuda101 in /opt/conda/lib/python3.7/site-packages (7.7.0)\nRequirement already satisfied: six>=1.9.0 in /opt/conda/lib/python3.7/site-packages (from cupy-cuda101) (1.14.0)\nRequirement already satisfied: fastrlock>=0.3 in /opt/conda/lib/python3.7/site-packages (from cupy-cuda101) (0.5)\nRequirement already satisfied: numpy>=1.9.0 in /opt/conda/lib/python3.7/site-packages (from cupy-cuda101) (1.18.5)\n\u001b[33mWARNING: You are using pip version 20.2.1; however, version 24.0 is available.\nYou should consider upgrading via the '/opt/conda/bin/python3.7 -m pip install --upgrade pip' command.\u001b[0m\n","output_type":"stream"}]},{"cell_type":"code","source":"!nvcc --version","metadata":{"execution":{"iopub.status.busy":"2024-05-22T14:48:48.973236Z","iopub.execute_input":"2024-05-22T14:48:48.973537Z","iopub.status.idle":"2024-05-22T14:48:49.969658Z","shell.execute_reply.started":"2024-05-22T14:48:48.973505Z","shell.execute_reply":"2024-05-22T14:48:49.968657Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"nvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2019 NVIDIA Corporation\nBuilt on Sun_Jul_28_19:07:16_PDT_2019\nCuda compilation tools, release 10.1, V10.1.243\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"BASE_PATH = '../input/rsna-intracranial-hemorrhage-detection/rsna-intracranial-hemorrhage-detection/'\nTRAIN_DIR = 'stage_2_train/'\nTEST_DIR = 'stage_2_test/'","metadata":{"_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a","_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0","execution":{"iopub.status.busy":"2024-05-22T14:48:49.971390Z","iopub.execute_input":"2024-05-22T14:48:49.971738Z","iopub.status.idle":"2024-05-22T14:48:49.976216Z","shell.execute_reply.started":"2024-05-22T14:48:49.971704Z","shell.execute_reply":"2024-05-22T14:48:49.975374Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"train_df = pd.read_csv(BASE_PATH + 'stage_2_train.csv')\ntrain_df['id'] = train_df['ID'].apply(lambda st: \"ID_\" + st.split('_')[1])\ntrain_df['subtype'] = train_df['ID'].apply(lambda st: st.split('_')[2])\ntrain_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-22T14:48:49.977481Z","iopub.execute_input":"2024-05-22T14:48:49.977864Z","iopub.status.idle":"2024-05-22T14:49:00.749991Z","shell.execute_reply.started":"2024-05-22T14:48:49.977833Z","shell.execute_reply":"2024-05-22T14:49:00.748975Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"                              ID  Label            id           subtype\n0          ID_12cadc6af_epidural      0  ID_12cadc6af          epidural\n1  ID_12cadc6af_intraparenchymal      0  ID_12cadc6af  intraparenchymal\n2  ID_12cadc6af_intraventricular      0  ID_12cadc6af  intraventricular\n3      ID_12cadc6af_subarachnoid      0  ID_12cadc6af      subarachnoid\n4          ID_12cadc6af_subdural      0  ID_12cadc6af          subdural","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>Label</th>\n      <th>id</th>\n      <th>subtype</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ID_12cadc6af_epidural</td>\n      <td>0</td>\n      <td>ID_12cadc6af</td>\n      <td>epidural</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ID_12cadc6af_intraparenchymal</td>\n      <td>0</td>\n      <td>ID_12cadc6af</td>\n      <td>intraparenchymal</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ID_12cadc6af_intraventricular</td>\n      <td>0</td>\n      <td>ID_12cadc6af</td>\n      <td>intraventricular</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ID_12cadc6af_subarachnoid</td>\n      <td>0</td>\n      <td>ID_12cadc6af</td>\n      <td>subarachnoid</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ID_12cadc6af_subdural</td>\n      <td>0</td>\n      <td>ID_12cadc6af</td>\n      <td>subdural</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_df = train_df[[\"id\",\"subtype\",\"Label\"]]\ntrain_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-22T14:49:00.753375Z","iopub.execute_input":"2024-05-22T14:49:00.753736Z","iopub.status.idle":"2024-05-22T14:49:01.576758Z","shell.execute_reply.started":"2024-05-22T14:49:00.753704Z","shell.execute_reply":"2024-05-22T14:49:01.575934Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"             id           subtype  Label\n0  ID_12cadc6af          epidural      0\n1  ID_12cadc6af  intraparenchymal      0\n2  ID_12cadc6af  intraventricular      0\n3  ID_12cadc6af      subarachnoid      0\n4  ID_12cadc6af          subdural      0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>subtype</th>\n      <th>Label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ID_12cadc6af</td>\n      <td>epidural</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ID_12cadc6af</td>\n      <td>intraparenchymal</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ID_12cadc6af</td>\n      <td>intraventricular</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ID_12cadc6af</td>\n      <td>subarachnoid</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ID_12cadc6af</td>\n      <td>subdural</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_df = pd.pivot_table(train_df,index=\"id\",columns=\"subtype\",values=\"Label\")\ntrain_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-22T14:49:01.578194Z","iopub.execute_input":"2024-05-22T14:49:01.578483Z","iopub.status.idle":"2024-05-22T14:49:09.335092Z","shell.execute_reply.started":"2024-05-22T14:49:01.578448Z","shell.execute_reply":"2024-05-22T14:49:09.334256Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"subtype       any  epidural  intraparenchymal  intraventricular  subarachnoid  \\\nid                                                                              \nID_000012eaf    0         0                 0                 0             0   \nID_000039fa0    0         0                 0                 0             0   \nID_00005679d    0         0                 0                 0             0   \nID_00008ce3c    0         0                 0                 0             0   \nID_0000950d7    0         0                 0                 0             0   \n\nsubtype       subdural  \nid                      \nID_000012eaf         0  \nID_000039fa0         0  \nID_00005679d         0  \nID_00008ce3c         0  \nID_0000950d7         0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>subtype</th>\n      <th>any</th>\n      <th>epidural</th>\n      <th>intraparenchymal</th>\n      <th>intraventricular</th>\n      <th>subarachnoid</th>\n      <th>subdural</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ID_000012eaf</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>ID_000039fa0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>ID_00005679d</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>ID_00008ce3c</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>ID_0000950d7</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"pivot_df = train_df.copy()\npivot_df.drop(\"ID_6431af929\",inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-22T14:49:09.336234Z","iopub.execute_input":"2024-05-22T14:49:09.336532Z","iopub.status.idle":"2024-05-22T14:49:10.006878Z","shell.execute_reply.started":"2024-05-22T14:49:09.336503Z","shell.execute_reply":"2024-05-22T14:49:10.006114Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"def map_to_gradient(grey_img):\n    rainbow_img = np.zeros((grey_img.shape[0], grey_img.shape[1], 3))\n    rainbow_img[:, :, 0] = np.clip(4 * grey_img - 2, 0, 1.0) * (grey_img > 0) * (grey_img <= 1.0)\n    rainbow_img[:, :, 1] =  np.clip(4 * grey_img * (grey_img <=0.75), 0,1) + np.clip((-4*grey_img + 4) * (grey_img > 0.75), 0, 1)\n    rainbow_img[:, :, 2] = np.clip(-4 * grey_img + 2, 0, 1.0) * (grey_img > 0) * (grey_img <= 1.0)\n    return rainbow_img\n\ndef rainbow_window(dcm):\n    grey_img = window_image(dcm, 40, 80)\n    return map_to_gradient(grey_img)\n\n#import cupy as cp\n\ndef sigmoid_window(dcm, window_center, window_width, U=1.0, eps=(1.0 / 255.0)):\n    img = dcm.pixel_array\n    img = cp.array(np.array(img))\n    _, _, intercept, slope = get_windowing(dcm)\n    img = img * slope + intercept\n    ue = cp.log((U / eps) - 1.0)\n    W = (2 / window_width) * ue\n    b = ((-2 * window_center) / window_width) * ue\n    z = W * img + b\n    img = U / (1 + cp.power(np.e, -1.0 * z))\n    img = (img - cp.min(img)) / (cp.max(img) - cp.min(img))\n    return cp.asnumpy(img)\n\ndef sigmoid_bsb_window(dcm):\n    brain_img = sigmoid_window(dcm, 40, 80)\n    subdural_img = sigmoid_window(dcm, 80, 200)\n    bone_img = sigmoid_window(dcm, 600, 2000)\n    \n    bsb_img = np.zeros((brain_img.shape[0], brain_img.shape[1], 3))\n    bsb_img[:, :, 0] = brain_img\n    bsb_img[:, :, 1] = subdural_img\n    bsb_img[:, :, 2] = bone_img\n    return bsb_img\n\ndef window_image(dcm, window_center, window_width):\n    _, _, intercept, slope = get_windowing(dcm)\n    img = dcm.pixel_array * slope + intercept\n    img_min = window_center - window_width // 2\n    img_max = window_center + window_width // 2\n    img[img < img_min] = img_min\n    img[img > img_max] = img_max\n    img = (img - np.min(img)) / (np.max(img) - np.min(img))\n    return img\n\ndef bsb_window(dcm):\n    brain_img = window_image(dcm, 40, 80)\n    subdural_img = window_image(dcm, 80, 200)\n    bone_img = window_image(dcm, 600, 2000)\n    \n    bsb_img = np.zeros((brain_img.shape[0], brain_img.shape[1], 3))\n    bsb_img[:, :, 0] = brain_img\n    bsb_img[:, :, 1] = subdural_img\n    bsb_img[:, :, 2] = bone_img\n    return bsb_img\n    \ndef get_first_of_dicom_field_as_int(x):\n    #get x[0] as in int is x is a 'pydicom.multival.MultiValue', otherwise get int(x)\n    if type(x) == pydicom.multival.MultiValue:\n        return int(x[0])\n    else:\n        return int(x)\n\ndef get_windowing(data):\n    dicom_fields = [data[('0028','1050')].value, #window center\n                    data[('0028','1051')].value, #window width\n                    data[('0028','1052')].value, #intercept\n                    data[('0028','1053')].value] #slope\n    return [get_first_of_dicom_field_as_int(x) for x in dicom_fields]","metadata":{"execution":{"iopub.status.busy":"2024-05-22T14:49:10.008508Z","iopub.execute_input":"2024-05-22T14:49:10.008940Z","iopub.status.idle":"2024-05-22T14:49:10.039345Z","shell.execute_reply.started":"2024-05-22T14:49:10.008896Z","shell.execute_reply":"2024-05-22T14:49:10.038316Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"def preprocess(file,type=\"WINDOW\",fdir=TRAIN_DIR):\n    dcm = pydicom.dcmread(BASE_PATH+fdir+file+\".dcm\")\n    if type == \"WINDOW\":\n        window_center , window_width, intercept, slope = get_windowing(dcm)\n        w = window_image(dcm, window_center, window_width)\n        win_img = np.repeat(w[:, :, np.newaxis], 3, axis=2)\n        #return win_img\n    elif type == \"SIGMOID\":\n        window_center , window_width, intercept, slope = get_windowing(dcm)\n        test_img = dcm.pixel_array\n        w = sigmoid_window(dcm, window_center, window_width)\n        win_img = np.repeat(w[:, :, np.newaxis], 3, axis=2)\n        #return win_img\n    elif type == \"BSB\":\n        win_img = bsb_window(dcm)\n        #return win_img\n    elif type == \"SIGMOID_BSB\":\n        win_img = sigmoid_bsb_window(dcm)\n    elif type == \"GRADIENT\":\n        win_img = rainbow_window(dcm)\n        #return win_img\n    else:\n        win_img = dcm.pixel_array\n    resized = cv2.resize(win_img,(224,224))\n    return resized\n\nclass DataLoader(Sequence):\n    def __init__(self, dataframe,\n                 batch_size,\n                 shuffle,\n                 input_shape,\n                 num_classes=6,\n                 steps=None,\n                 prep=\"BSB\",\n                 fdir=TRAIN_DIR):\n        \n        self.data_ids = dataframe.index.values\n        self.dataframe = dataframe\n        self.batch_size = batch_size\n        self.shuffle = shuffle\n        self.input_shape = input_shape\n        self.num_classes = num_classes\n        self.current_epoch=0\n        self.prep = prep\n        self.fdir = fdir\n        self.steps=steps\n        if self.steps is not None:\n            self.steps = np.round(self.steps/3) * 3\n            self.undersample()\n        \n    def undersample(self):\n        part = np.int(self.steps/3 * self.batch_size)\n        zero_ids = np.random.choice(self.dataframe.loc[self.dataframe[\"any\"] == 0].index.values, size=5000, replace=False)\n        hot_ids = np.random.choice(self.dataframe.loc[self.dataframe[\"any\"] == 1].index.values, size=5000, replace=True)\n        self.data_ids = list(set(zero_ids).union(hot_ids))\n        np.random.shuffle(self.data_ids)\n        \n    # defines the number of steps per epoch\n    def __len__(self):\n        if self.steps is None:\n            return np.int(np.ceil(len(self.data_ids) / np.float(self.batch_size)))\n        else:\n            return 3*np.int(self.steps/3) \n    \n    # at the end of an epoch: \n    def on_epoch_end(self):\n        # if steps is None and shuffle is true:\n        if self.steps is None:\n            self.data_ids = self.dataframe.index.values\n            if self.shuffle:\n                np.random.shuffle(self.data_ids)\n        else:\n            self.undersample()\n        self.current_epoch += 1\n    \n    # should return a batch of images\n    def __getitem__(self, item):\n        # select the ids of the current batch\n        current_ids = self.data_ids[item*self.batch_size:(item+1)*self.batch_size]\n        X, y = self.__generate_batch(current_ids)\n        return X, y\n    \n    # collect the preprocessed images and targets of one batch\n    def __generate_batch(self, current_ids):\n        X = np.empty((self.batch_size, *self.input_shape, 3))\n        y = np.empty((self.batch_size, self.num_classes))\n        for idx, ident in enumerate(current_ids):\n            # Store sample\n            #image = self.preprocessor.preprocess(ident) \n            image = preprocess(ident,self.prep,self.fdir)\n            X[idx] = image\n            # Store class\n            y[idx] = self.__get_target(ident)\n        return X, y\n    \n    # extract the targets of one image id:\n    def __get_target(self, ident):\n        targets = self.dataframe.loc[ident].values\n        return targets","metadata":{"execution":{"iopub.status.busy":"2024-05-22T14:49:10.040909Z","iopub.execute_input":"2024-05-22T14:49:10.041213Z","iopub.status.idle":"2024-05-22T14:49:10.074108Z","shell.execute_reply.started":"2024-05-22T14:49:10.041183Z","shell.execute_reply":"2024-05-22T14:49:10.073276Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"def DenseNet():\n    densenet = DenseNet121(\n    #weights='../input/densenet-keras/DenseNet-BC-121-32-no-top.h5',\n    weights='imagenet',\n    include_top=False)\n    return densenet\ndef ResNet():\n    resnet = ResNet50V2(weights=\"imagenet\",include_top=False)\n    return resnet\ndef Inception():\n    incept = InceptionV3(weights=\"imagenet\",include_top=False)\n    return incept\n\ndef get_backbone(name):\n    if name == \"RESNET\":\n        return ResNet()\n    elif name == \"DENSENET\":\n        return DenseNet()\n    elif name == \"INCEPT\":\n        return Inception()\n\ndef build_model(backbone):\n    m = backbone\n    x = m.output\n    x = GlobalAveragePooling2D()(x)\n    x = Dropout(0.3)(x)\n    x = Dense(100, activation=\"relu\")(x)\n    x = Dropout(0.3)(x)\n    pred = Dense(6,activation=\"sigmoid\")(x)\n    model = Model(inputs=m.input,outputs=pred)\n    return model","metadata":{"execution":{"iopub.status.busy":"2024-05-22T14:49:10.075945Z","iopub.execute_input":"2024-05-22T14:49:10.076369Z","iopub.status.idle":"2024-05-22T14:49:10.088356Z","shell.execute_reply.started":"2024-05-22T14:49:10.076325Z","shell.execute_reply":"2024-05-22T14:49:10.087611Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"train,test = train_test_split(pivot_df,test_size=0.2,random_state=42,shuffle=True)\n\nsplit_seed = 1\nkfold = StratifiedKFold(n_splits=5, random_state=split_seed,shuffle=True).split(np.arange(train.shape[0]), train[\"any\"].values)\n\ntrain_idx, dev_idx = next(kfold)\n\ntrain_data = train.iloc[train_idx]\ndev_data = train.iloc[dev_idx]\n\nprint(train_data.shape)\nprint(dev_data.shape)","metadata":{"execution":{"iopub.status.busy":"2024-05-22T14:49:10.089742Z","iopub.execute_input":"2024-05-22T14:49:10.090144Z","iopub.status.idle":"2024-05-22T14:49:10.388173Z","shell.execute_reply.started":"2024-05-22T14:49:10.090113Z","shell.execute_reply":"2024-05-22T14:49:10.387210Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"(481792, 6)\n(120449, 6)\n","output_type":"stream"}]},{"cell_type":"code","source":"f1 = tfa.losses.SigmoidFocalCrossEntropy(from_logits=True)\ndef casting_focal_loss():\n    def inner_casting(y_true,y_pred):\n        y_true = tf.cast(y_true, tf.float32)\n        y_true = tf.clip_by_value(y_true,1e-7,1-1e-7)\n        y_pred = tf.cast(y_pred, tf.float32)\n        y_pred = tf.clip_by_value(y_pred,1e-7,1-1e-7)\n        \n        return f1(y_true,y_pred)\n    return inner_casting\nMETRICS = ['categorical_accuracy']\n\n#LOSS = tfa.losses.SigmoidFocalCrossEntropy(from_logits=False)\nLOSS = casting_focal_loss()\n\nBATCH_SIZE = 32\nTRAIN_STEPS = 500#train_data.shape[0] // BATCH_SIZE\nVAL_STEPS = 500#dev_data.shape[0] // BATCH_SIZE\nEPOCHS = 10\n#WEIGHT = [2.0,1.0,1.0,1.0,1.0,1.0]\nALPHA = 0.5\nGAMMA = 2\n\nLR = 0.0001\n\nPREP = \"SIGMOID\"\nARCH = 'INCEPT'\n\ntrain_dataloader = DataLoader(train_data,\n                              BATCH_SIZE,\n                              shuffle=True,\n                              input_shape=(224,224),\n                              steps=TRAIN_STEPS,\n                              prep=PREP)\n\ndev_dataloader = DataLoader(dev_data, \n                            BATCH_SIZE,\n                            shuffle=True,\n                            input_shape=(224,224),\n                            steps=VAL_STEPS,\n                            prep=PREP)\ntest_dataloader = DataLoader(test,\n                            BATCH_SIZE,\n                            shuffle=False,\n                            input_shape=(224,224),\n                            prep=PREP)\n\ncpath = \"./\" + ARCH + \"_\" + PREP + \"_\" + str(TRAIN_STEPS) + \"_\" + str(EPOCHS)\ncheckpoint = ModelCheckpoint(filepath=cpath + \".model\",mode=\"min\",verbose=1,save_best_only=True,save_weights_only=False,period=1)\n\nmodel = build_model(get_backbone(ARCH))\n\nmodel.compile(optimizer=Adam(learning_rate=LR),loss=LOSS,metrics=METRICS)\n\nhistory = model.fit_generator(generator=train_dataloader,validation_data=dev_dataloader,epochs=EPOCHS,workers=8,callbacks=[checkpoint])\n\nwith open(cpath + \".history\", 'wb') as file_pi:\n    pickle.dump(history.history, file_pi)\n    \nprint(\"Generating predictions\")\n","metadata":{"execution":{"iopub.status.busy":"2024-05-22T14:49:10.389460Z","iopub.execute_input":"2024-05-22T14:49:10.389788Z","iopub.status.idle":"2024-05-22T15:36:57.237775Z","shell.execute_reply.started":"2024-05-22T14:49:10.389757Z","shell.execute_reply":"2024-05-22T15:36:57.235333Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/inception_v3/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\n87916544/87910968 [==============================] - 3s 0us/step\nEpoch 1/10\n501/501 [==============================] - ETA: 0s - loss: 0.7156 - categorical_accuracy: 0.4134\nEpoch 00001: val_loss improved from inf to 0.70722, saving model to ./INCEPT_SIGMOID_500_10.model\n501/501 [==============================] - 292s 583ms/step - loss: 0.7156 - categorical_accuracy: 0.4134 - val_loss: 0.7072 - val_categorical_accuracy: 0.9414\nEpoch 2/10\n501/501 [==============================] - ETA: 0s - loss: 0.6972 - categorical_accuracy: 0.3874\nEpoch 00002: val_loss did not improve from 0.70722\n501/501 [==============================] - 257s 513ms/step - loss: 0.6972 - categorical_accuracy: 0.3874 - val_loss: 0.7160 - val_categorical_accuracy: 0.9680\nEpoch 3/10\n501/501 [==============================] - ETA: 0s - loss: 0.6928 - categorical_accuracy: 0.3912\nEpoch 00003: val_loss improved from 0.70722 to 0.70633, saving model to ./INCEPT_SIGMOID_500_10.model\n501/501 [==============================] - 301s 601ms/step - loss: 0.6928 - categorical_accuracy: 0.3912 - val_loss: 0.7063 - val_categorical_accuracy: 0.7917\nEpoch 4/10\n501/501 [==============================] - ETA: 0s - loss: 0.6956 - categorical_accuracy: 0.3900\nEpoch 00004: val_loss improved from 0.70633 to 0.70268, saving model to ./INCEPT_SIGMOID_500_10.model\n501/501 [==============================] - 301s 600ms/step - loss: 0.6956 - categorical_accuracy: 0.3900 - val_loss: 0.7027 - val_categorical_accuracy: 0.8992\nEpoch 5/10\n501/501 [==============================] - ETA: 0s - loss: 0.6996 - categorical_accuracy: 0.4305\nEpoch 00005: val_loss improved from 0.70268 to 0.70182, saving model to ./INCEPT_SIGMOID_500_10.model\n501/501 [==============================] - 304s 606ms/step - loss: 0.6996 - categorical_accuracy: 0.4305 - val_loss: 0.7018 - val_categorical_accuracy: 0.9765\nEpoch 6/10\n501/501 [==============================] - ETA: 0s - loss: 0.6991 - categorical_accuracy: 0.3124\nEpoch 00006: val_loss improved from 0.70182 to 0.69889, saving model to ./INCEPT_SIGMOID_500_10.model\n501/501 [==============================] - 302s 604ms/step - loss: 0.6991 - categorical_accuracy: 0.3124 - val_loss: 0.6989 - val_categorical_accuracy: 0.9620\nEpoch 7/10\n501/501 [==============================] - ETA: 0s - loss: 0.6992 - categorical_accuracy: 0.3177 - ETA: 34s - loss: 0.6 - ETA: 24s - loss: 0.6995 - categori - ETA: 18s - loss\nEpoch 00007: val_loss did not improve from 0.69889\n501/501 [==============================] - 260s 518ms/step - loss: 0.6992 - categorical_accuracy: 0.3177 - val_loss: 0.7021 - val_categorical_accuracy: 0.9695\nEpoch 8/10\n501/501 [==============================] - ETA: 0s - loss: 0.7008 - categorical_accuracy: 0.3205 \nEpoch 00008: val_loss improved from 0.69889 to 0.69864, saving model to ./INCEPT_SIGMOID_500_10.model\n501/501 [==============================] - 300s 598ms/step - loss: 0.7008 - categorical_accuracy: 0.3205 - val_loss: 0.6986 - val_categorical_accuracy: 0.9591\nEpoch 9/10\n501/501 [==============================] - ETA: 0s - loss: 0.7012 - categorical_accuracy: 0.3136\nEpoch 00009: val_loss did not improve from 0.69864\n501/501 [==============================] - 257s 514ms/step - loss: 0.7012 - categorical_accuracy: 0.3136 - val_loss: 0.7024 - val_categorical_accuracy: 0.9857\nEpoch 10/10\n501/501 [==============================] - ETA: 0s - loss: 0.6977 - categorical_accuracy: 0.3222\nEpoch 00010: val_loss did not improve from 0.69864\n501/501 [==============================] - 256s 511ms/step - loss: 0.6977 - categorical_accuracy: 0.3222 - val_loss: 0.7059 - val_categorical_accuracy: 0.9809\nGenerating predictions\n","output_type":"stream"}]},{"cell_type":"code","source":"test_csv = \"../input/rsna-intracranial-hemorrhage-detection/rsna-intracranial-hemorrhage-detection/stage_2_sample_submission.csv\"\nBASE_PATH = \"../input/rsna-intracranial-hemorrhage-detection/rsna-intracranial-hemorrhage-detection/\"\nTEST_DIR = \"stage_2_test/\"\ntest_df = pd.read_csv(test_csv)\ntest_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-22T15:36:57.241243Z","iopub.execute_input":"2024-05-22T15:36:57.242133Z","iopub.status.idle":"2024-05-22T15:36:58.097943Z","shell.execute_reply.started":"2024-05-22T15:36:57.242083Z","shell.execute_reply":"2024-05-22T15:36:58.096919Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"                              ID  Label\n0          ID_0fbf6a978_epidural    0.5\n1  ID_0fbf6a978_intraparenchymal    0.5\n2  ID_0fbf6a978_intraventricular    0.5\n3      ID_0fbf6a978_subarachnoid    0.5\n4          ID_0fbf6a978_subdural    0.5","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>Label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ID_0fbf6a978_epidural</td>\n      <td>0.5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ID_0fbf6a978_intraparenchymal</td>\n      <td>0.5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ID_0fbf6a978_intraventricular</td>\n      <td>0.5</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ID_0fbf6a978_subarachnoid</td>\n      <td>0.5</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ID_0fbf6a978_subdural</td>\n      <td>0.5</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"testdf = test_df.ID.str.rsplit(\"_\", n=1, expand=True)\ntestdf = testdf.rename({0: \"id\", 1: \"subtype\"}, axis=1)\ntestdf.loc[:, \"label\"] = 0\ntestdf.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-22T15:36:58.099416Z","iopub.execute_input":"2024-05-22T15:36:58.099758Z","iopub.status.idle":"2024-05-22T15:37:01.945992Z","shell.execute_reply.started":"2024-05-22T15:36:58.099725Z","shell.execute_reply":"2024-05-22T15:37:01.944937Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"             id           subtype  label\n0  ID_0fbf6a978          epidural      0\n1  ID_0fbf6a978  intraparenchymal      0\n2  ID_0fbf6a978  intraventricular      0\n3  ID_0fbf6a978      subarachnoid      0\n4  ID_0fbf6a978          subdural      0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>subtype</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ID_0fbf6a978</td>\n      <td>epidural</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ID_0fbf6a978</td>\n      <td>intraparenchymal</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ID_0fbf6a978</td>\n      <td>intraventricular</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ID_0fbf6a978</td>\n      <td>subarachnoid</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ID_0fbf6a978</td>\n      <td>subdural</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"testdf = pd.pivot_table(testdf, index=\"id\", columns=\"subtype\", values=\"label\")\ntestdf.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-22T15:37:01.947577Z","iopub.execute_input":"2024-05-22T15:37:01.947997Z","iopub.status.idle":"2024-05-22T15:37:02.942631Z","shell.execute_reply.started":"2024-05-22T15:37:01.947963Z","shell.execute_reply":"2024-05-22T15:37:02.941846Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"subtype       any  epidural  intraparenchymal  intraventricular  subarachnoid  \\\nid                                                                              \nID_000000e27    0         0                 0                 0             0   \nID_000009146    0         0                 0                 0             0   \nID_00007b8cb    0         0                 0                 0             0   \nID_000134952    0         0                 0                 0             0   \nID_000176f2a    0         0                 0                 0             0   \n\nsubtype       subdural  \nid                      \nID_000000e27         0  \nID_000009146         0  \nID_00007b8cb         0  \nID_000134952         0  \nID_000176f2a         0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>subtype</th>\n      <th>any</th>\n      <th>epidural</th>\n      <th>intraparenchymal</th>\n      <th>intraventricular</th>\n      <th>subarachnoid</th>\n      <th>subdural</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ID_000000e27</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>ID_000009146</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>ID_00007b8cb</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>ID_000134952</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>ID_000176f2a</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"def turn_pred_to_dataframe(data_df, pred):\n    df = pd.DataFrame(pred, columns=data_df.columns, index=data_df.index)\n    df = df.stack().reset_index()\n    df.loc[:, \"ID\"] = df.id.str.cat(df.subtype, sep=\"_\")\n    df = df.drop([\"id\", \"subtype\"], axis=1)\n    df = df.rename({0: \"Label\"}, axis=1)\n    return df","metadata":{"execution":{"iopub.status.busy":"2024-05-22T15:37:02.943862Z","iopub.execute_input":"2024-05-22T15:37:02.944143Z","iopub.status.idle":"2024-05-22T15:37:02.951509Z","shell.execute_reply.started":"2024-05-22T15:37:02.944116Z","shell.execute_reply":"2024-05-22T15:37:02.950559Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"test_dataloader = DataLoader(testdf,32,shuffle=False,input_shape=(224,224),prep=\"SIGMOID\",fdir=TEST_DIR)","metadata":{"execution":{"iopub.status.busy":"2024-05-22T15:37:02.952643Z","iopub.execute_input":"2024-05-22T15:37:02.952996Z","iopub.status.idle":"2024-05-22T15:37:02.962936Z","shell.execute_reply.started":"2024-05-22T15:37:02.952963Z","shell.execute_reply":"2024-05-22T15:37:02.962194Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"test_pred = model.predict(test_dataloader,verbose=1)","metadata":{"execution":{"iopub.status.busy":"2024-05-22T15:37:02.964062Z","iopub.execute_input":"2024-05-22T15:37:02.964353Z","iopub.status.idle":"2024-05-22T16:20:31.135482Z","shell.execute_reply.started":"2024-05-22T15:37:02.964325Z","shell.execute_reply":"2024-05-22T16:20:31.133981Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"3789/3789 [==============================] - 2606s 688ms/step\n","output_type":"stream"}]},{"cell_type":"code","source":"pred = test_pred[0:testdf.shape[0]]\npred_df = turn_pred_to_dataframe(testdf,pred)\npred_df.to_csv(\"Incept_mfl_pred.csv\",index=False)","metadata":{"execution":{"iopub.status.busy":"2024-05-22T16:20:31.138813Z","iopub.execute_input":"2024-05-22T16:20:31.139250Z","iopub.status.idle":"2024-05-22T16:20:34.946279Z","shell.execute_reply.started":"2024-05-22T16:20:31.139206Z","shell.execute_reply":"2024-05-22T16:20:34.945291Z"},"trusted":true},"execution_count":19,"outputs":[]}]}